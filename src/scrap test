from Visualization import PolarimeterVisualization
from polarimeter import Polarimeter
from DataAnalysis import PolarimeterAnalysis
import numpy as np
import time

print(np.std([72.681, 73.625, 72.655, 73.605, 73.514, 74.446, 72.63, 73.492]))
print(np.average([72.681, 73.625, 72.655, 73.605, 73.514, 74.446, 72.63, 73.492]))


















# p = Polarimeter(14,14,14,11400540)
# p.InitializeHardware()
# p.MeasureLaserFluctuation()

# print(np.linspace(0,157.5, 8))



# import numpy as np

# # Measured power values
# powers = np.array([116.3, 118.3, 49.7, 3.20, 159, 378, 378, 203])  # in ÂµW
# angles = np.array([0, 22.5, 45, 67.5, 90, 112.5, 135, 157.5])  # in degrees

# # Number of measurements
# N = len(powers)

# # Convert angles to radians for trigonometric functions
# angles_rad = np.deg2rad(angles)

# # Fourier Coefficients
# A = (2/N) * np.sum(powers)
# B = (4/N) * np.sum(powers * np.sin(2 * angles_rad))
# C = (4/N) * np.sum(powers * np.cos(4 * angles_rad))
# D = (4/N) * np.sum(powers * np.sin(4 * angles_rad))

# # Stokes Parameters
# S0 = A - C
# S1 = 2 * C
# S2 = 2 * D
# S3 = B

# # Normalized Stokes Parameters
# S0_norm = 1
# S1_norm = S1 / S0
# S2_norm = S2 / S0
# S3_norm = S3 / S0

# # Ellipse Parameters
# psi = 0.5 * np.arctan2(S2, S1)
# Ex = np.sqrt(0.5 * (S0_norm + S1_norm))
# Ey = np.sqrt(0.5 * (S0_norm - S1_norm))

# # Print results
# print(f"Fourier Coefficients: A={A}, B={B}, C={C}, D={D}")
# print(f"Stokes Parameters: S0={S0}, S1={S1}, S2={S2}, S3={S3}")
# print(f"Normalized Stokes Parameters: S1={S1_norm}, S2={S2_norm}, S3={S3_norm}")
# print(f"Ellipse Parameters: psi={np.rad2deg(psi)} degrees, Ex={Ex}, Ey={Ey}")
